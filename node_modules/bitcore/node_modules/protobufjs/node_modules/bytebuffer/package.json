{
  "name": "bytebuffer",
  "version": "3.1.1",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "description": "The swiss army knife for binary data in JavaScript.",
  "main": "index.js",
  "browser": "dist/ByteBufferAB.min.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/ByteBuffer.js.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/ByteBuffer.js/issues"
  },
  "keywords": [
    "net",
    "array",
    "buffer",
    "arraybuffer",
    "typed array",
    "bytebuffer",
    "json",
    "websocket",
    "webrtc"
  ],
  "dependencies": {
    "long": "~1",
    "bufferview": "~1"
  },
  "devDependencies": {
    "utfx": "~1.0",
    "testjs": "~1",
    "metascript": "~0",
    "closurecompiler": "~1"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "node node_modules/testjs/bin/testjs tests/suite.js",
    "make": "npm run-script build && npm run-script compile && npm run-script compress && npm test && npm run-script jsdoc",
    "build": "node scripts/build.js",
    "compile": "ccjs dist/ByteBufferAB.js --create_source_map=dist/ByteBufferAB.min.map --compilation_level=ADVANCED_OPTIMIZATIONS --externs=externs/minimal-env.js --externs=externs/Long.js > dist/ByteBufferAB.min.js",
    "compress": "gzip -c -9 dist/ByteBufferAB.min.js > dist/ByteBufferAB.min.js.gz",
    "jsdoc": "jsdoc -c jsdoc.json"
  },
  "readme": "![ByteBuffer.js - The swiss army knife for binary data in JavaScript.](https://raw.github.com/dcodeIO/ByteBuffer.js/master/ByteBuffer.png)\r\n======================================\r\nA fast and complete ByteBuffer implementation using either ArrayBuffers in the browser or node Buffers under node.js,\r\ngenerated from a single source tree through [MetaScript](https://github.com/dcodeIO/MetaScript).\r\n\r\nIf you are looking for ByteBuffer.js 2 (ArrayBuffers only), [that's the branch](https://github.com/dcodeIO/ByteBuffer.js/tree/ByteBuffer2).\r\n\r\nWhat can it do?\r\n---------------\r\n* 8, 16, 32 and 64 bit signed and unsigned integers\r\n* 32 and 64 bit floats\r\n* Big and little endianness\r\n* Varints as used in protobuf (32 and 64 bit, zig-zag)\r\n* Base64, binary, debug, hex and utf8 encodings\r\n* Handy string and debugging utilities\r\n* Relative and absolute zero-copy operations wherever possible\r\n* Transparent resizing when using unknown-length data\r\n* Chaining of all operations that do not return a specific value\r\n* Slicing, appending, prepending, reversing, flip, mark, reset, etc.\r\n\r\nMore\r\n----\r\n* CommonJS, AMD and shim compatible\r\n* Also available via [npm](https://npmjs.org/package/bytebuffer)\r\n* Compiled through [Closure Compiler](https://developers.google.com/closure/compiler/) using ADVANCED_OPTIMIZATIONS \r\n (fully annotated, includes externs and source map)\r\n* Fully documented using [jsdoc3](https://github.com/jsdoc3/jsdoc)\r\n* Well tested through [test.js](https://github.com/dcodeIO/test.js)\r\n* Zero production dependencies (Long.js is optional)\r\n\r\nUsage\r\n-----\r\n### Node.js ###\r\n* Install: `npm install bytebuffer`\r\n\r\n```javascript\r\nvar ByteBuffer = require(\"bytebuffer\");\r\nvar bb = new ByteBuffer();\r\nbb.writeIString(\"Hello world!\").flip();\r\nconsole.log(bb.readIString()+\" from ByteBuffer.js\");\r\n```\r\n\r\n### Browser ###\r\n\r\nOptionally depends on [Long.js](https://github.com/dcodeIO/Long.js) for long (int64) support. If you do not require long\r\nsupport, you can skip the Long.js include.\r\n\r\n```html\r\n<script src=\"Long.min.js\"></script>\r\n<script src=\"ByteBufferAB.min.js\"></script>\r\n```\r\n\r\n```javascript\r\nvar ByteBuffer = dcodeIO.ByteBuffer;\r\nvar bb = new ByteBuffer();\r\nbb.writeIString(\"Hello world!\").flip();\r\nalert(bb.readIString()+\" from ByteBuffer.js\");\r\n```\r\n\r\n### AMD ###\r\n\r\nOptionally depends on [Long.js](https://github.com/dcodeIO/Long.js) for long (int64) support. If you do not require long\r\nsupport, you can skip the Long.js config. [Require.js](http://requirejs.org/) example:\r\n\r\n```javascript\r\nrequire.config({\r\n    \"paths\": {\r\n        \"Long\": \"/path/to/Long.js\"\r\n        \"ByteBuffer\": \"/path/to/ByteBufferAB.js\"\r\n    }\r\n});\r\nrequire([\"ByteBuffer\"], function(ByteBuffer) {\r\n    var bb = new ByteBuffer();\r\n    bb.writeIString(\"Hello world!\").flip();\r\n    alert(bb.readIString()+\" from ByteBuffer.js\");\r\n});\r\n```\r\n\r\nDownloads\r\n---------\r\n* [ZIP-Archive](https://github.com/dcodeIO/ByteBuffer.js/archive/master.zip)\r\n* [Tarball](https://github.com/dcodeIO/ByteBuffer.js/tarball/master)\r\n\r\nDocumentation\r\n-------------\r\n* [View the API documentation](http://htmlpreview.github.com/?http://github.com/dcodeIO/ByteBuffer.js/master/docs/ByteBuffer.html)\r\n\r\nTests (& Examples) [![Build Status](https://travis-ci.org/dcodeIO/ByteBuffer.js.png?branch=master)](https://travis-ci.org/dcodeIO/ByteBuffer.js)\r\n------------------\r\n* [View source](https://github.com/dcodeIO/ByteBuffer.js/blob/master/tests/suite.js)\r\n* [View report](https://travis-ci.org/dcodeIO/ByteBuffer.js)\r\n\r\nSupport for IE<10, FF<15, Chrome<9 etc.\r\n---------------------------------------\r\n* Requires working ArrayBuffer & DataView implementations (i.e. use a [polyfill](https://github.com/inexorabletash/polyfill#typed-arrays-polyfill))\r\n\r\nContributors\r\n------------\r\n[Dretch](https://github.com/Dretch) (IE8 compatibility)\r\n\r\nLicense\r\n-------\r\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dcodeIO/ByteBuffer.js",
  "_id": "bytebuffer@3.1.1",
  "_from": "bytebuffer@~3.1"
}
